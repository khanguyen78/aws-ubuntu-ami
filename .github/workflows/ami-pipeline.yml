name: Full AMI CI/CD Pipeline

on:
  workflow_dispatch:

jobs:
  packer-build:
    name: Build AMI with Packer & Ansible
    runs-on: ubuntu-latest

    outputs:
      ami_id: ${{ steps.extract_ami_id.outputs.ami_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Packer
        uses: hashicorp/setup-packer@v3

      - name: Set up Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: us-east-1

      - name: Initialize and validate Packer
        run: |
          packer init packer/ubuntu-ami.pkr.hcl
          packer validate packer/ubuntu-ami.pkr.hcl

      - name: Build AMI
        run: |
          packer build -machine-readable packer/ubuntu-ami.pkr.hcl | tee packer_output.txt

      - name: Extract AMI ID
        id: extract_ami_id
        run: |
          AMI_ID=$(grep 'artifact,0,id' packer_output.txt | cut -d, -f6 | cut -d: -f2)
          echo "AMI ID: $AMI_ID"
          echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT

  terraform-deploy:
    name: Deploy EC2 Image Builder via Terraform
    runs-on: ubuntu-latest
    needs: packer-build

    env:
      TF_VAR_aws_region: us-east-1
      TF_VAR_ami_id: ${{ needs.packer-build.outputs.ami_id }}
      TF_VAR_instance_profile_name: ${{ secrets.INSTANCE_PROFILE }}
      TF_VAR_subnet_id: ${{ steps.tf.outputs.public_subnet_ids[0] }}
      TF_VAR_security_group_id: ${{ steps.tf.outputs.security_group_id }}



    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: us-east-1

      - name: Terraform Init & Apply
        working-directory: infra
        run: |
          terraform init
          terraform apply -auto-approve

  trigger-pipeline:
    name: Trigger Image Builder
    runs-on: ubuntu-latest
    needs: terraform-deploy

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: us-east-1

      - name: Start Image Builder pipeline
        run: |
          PIPELINE_ARN=$(aws imagebuilder list-image-pipelines \
            --query "imagePipelineList[?name=='ubuntu-ami-pipeline'].arn" \
            --output text)
          echo "Triggering pipeline: $PIPELINE_ARN"
          aws imagebuilder start-image-pipeline-execution --image-pipeline-arn $PIPELINE_ARN

